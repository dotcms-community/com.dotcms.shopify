
#set($myCollection = $json.generate($dotContentMap.shopifyCollection))
#set($productsToShow = $myCollection.limit)
#set($sortKey = $myCollection.sortKey)
#set($shopifyData = $dotshopify.getCollectionById($myCollection.id))
#set($collection = $shopifyData.data.collection)
#set($products = $collection.products.edges)

<!-- Generate unique ID for this instance -->
#set($uniqueId = $UtilMethods.getRandomString(8))

<!-- Include the product grid component -->
#dotParse("/application/shopify/vtl/components/shopify-product-carousel.vtl")

<div class="collection-header">
    <h1 class="collection-title">#if($collection.title)$collection.title#{else}Product Collection#end</h1>
    #if($collection.description)
        <p class="collection-description">$collection.description</p>
    #end
</div>

<!-- Use unique ID for products data -->
<textarea id="productsData-${uniqueId}" style="display: none;visibility: hidden;">
    $products.toString()
</textarea>

<!-- Wrap everything in a unique container -->
<div class="shopify-collection-container" data-collection-id="${uniqueId}">
    <script>
        (function() {
            // Create scoped variables for this instance
            const containerId = '${uniqueId}';
            const container = document.querySelector('[data-collection-id="' + containerId + '"]');
            const productJson = JSON.parse(document.getElementById("productsData-" + containerId).value);
            const productsToShow = $productsToShow || productJson.length;
            
            // Extract product nodes from the edges structure and limit to productsToShow
            const productNodes = productJson.map(edge => edge.node).slice(0, productsToShow);
            console.log("productNodes for container " + containerId + ":", productNodes);
            console.log("Limited to", productsToShow, "products out of", productJson.length, "total");
            
            // Set the products data on THIS grid component
            document.addEventListener('DOMContentLoaded', function() {
                const productGrid = container.querySelector('shopify-product-grid');
                if (productGrid) {
                    productGrid.setAttribute('products', JSON.stringify(productNodes));
                    // Call reloadGrid to refresh the component with new data
                    productGrid.reloadGrid();
                }
            });

            // Create instance-specific function to reload THIS product grid
            container.reloadProductGrid = function(newProducts) {
                const productGrid = container.querySelector('shopify-product-grid');
                if (productGrid) {
                    if (Array.isArray(newProducts)) {
                        productGrid.updateProducts(newProducts);
                        console.log('Product grid ' + containerId + ' reloaded with', newProducts.length, 'products');
                    } else {
                        console.error('reloadProductGrid expects an array of products');
                    }
                } else {
                    console.error('Product grid component not found in container ' + containerId);
                }
            };
        })();
    </script>

    <!-- Product Grid -->
    <shopify-product-grid
        products="[]"
        columns="4"
        gap="1.5rem">
    </shopify-product-grid>
</div>

<!-- ... existing code ... -->
