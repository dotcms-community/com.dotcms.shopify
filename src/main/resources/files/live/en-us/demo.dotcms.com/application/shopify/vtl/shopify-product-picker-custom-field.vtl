
#[[

<!-- shopify-product-picker.js -->
<script type="module">
  class ShopifyProductPicker extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: 'open' });
      this.selectedProductKey = 'selectedShopifyProduct';
      this.state = {
        selected: null,
        search: '',
        results: [],
        searching: false,
        modalOpen: false,
        error: ''
      };
      this.apiEndpoint = "/api/v1/shopify/product" ;
      this.isProcessingSelection = false; // Flag to prevent multiple simultaneous selections
    }

    static get observedAttributes() {
      return ['contentfield'];
    }

    get contentField() {
      return this.getAttribute('contentfield');
    }

    connectedCallback() {
      this.render();
      this.loadSelectedFromContentField();
      this.shadowRoot.addEventListener('click', this.handleDocumentClick.bind(this));
    }

    disconnectedCallback() {
      this.shadowRoot.removeEventListener('click', this.handleDocumentClick);
    }

    handleDocumentClick(e) {
      if (e.target.matches('.choose-btn')) {
        this.toggleModal(true);
      } else if (e.target.matches('.close-modal')) {
        this.toggleModal(false);
      } else if (e.target.closest('.product-card')) {
        // Handle any click within a product card (including the card itself)
        const productCard = e.target.closest('.product-card');
        this.selectProductFromResult(productCard.dataset.idx);
        e.stopPropagation();
        e.preventDefault();
      }
    }

    loadSelectedFromContentField() {
      if (this.contentField) {
        const contentFieldElement = document.getElementById(this.contentField);
        console.log('Loading from content field:', this.contentField, 'Element found:', !!contentFieldElement);
        if (contentFieldElement && contentFieldElement.value) {
          console.log('Content field value:', contentFieldElement.value);
          try {
            this.state.selected = JSON.parse(contentFieldElement.value);
            console.log('Parsed selected product:', this.state.selected);
            this.render();
          } catch (e) {
            console.warn('Failed to parse content field value:', contentFieldElement.value, e);
          }
        } else {
          console.log('No content field value found');
        }
      }
    }



    saveSelectedToContentField() {

      if (this.contentField && document.getElementById(this.contentField)) {
        const contentFieldElement = document.getElementById(this.contentField);


          const value = this.state.selected ? JSON.stringify(this.state.selected) : '';
          contentFieldElement.value = value;
          console.log('Updated hidden field:', this.contentField, 'with value:', value);


          // Trigger a change event to notify form systems
          contentFieldElement.dispatchEvent(new Event('change', { bubbles: true }));

        } else {
          console.warn('Content field element not found:', this.contentField);
        }
    }
    
    
    async loadProductById(productId){
        const resp = await fetch(`${this.apiEndpoint}${productId}`);
        if (!resp.ok) throw new Error(resp.statusText);
        const data = await resp.json();
        this.state.selected = data;
    }
    

    toggleModal(open) {
      this.state.modalOpen = open;
      this.state.search = '';
      this.state.results = [];
      this.state.error = '';
      this.state.searching = false;
      this.render();
      if (open) this.shadowRoot.querySelector('.search-input').focus();
    }

    async handleSearchInput(e) {
      console.log("e", e);
      const query = e.target.value;
      this.state.search = query;
      this.state.error = '';
      if (query.trim().length < 3) {
        this.state.results = [];
        this.updateResults();
        return;
      }
      this.state.searching = true;
      this.updateResults();

      try {
        // ⚡️ Update this to your actual API endpoint.
        const resp = await fetch(`${this.apiEndpoint}/_search?searchTerm=${query}&limit=10`);
        if (!resp.ok) throw new Error(resp.statusText);
        const data = await resp.json();

        this.state.results = data;
        if (this.state.results.length === 0) this.state.error = 'No products found.';
        this.state.searching = false;
        this.updateResults();
      } catch (error) {
        this.state.error = "Error searching products.";
        this.state.searching = false;
        this.updateResults();
      }
    }
    updateResults() {
      const resultsContainer = this.shadowRoot.querySelector('.results');
      const errorContainer = this.shadowRoot.querySelector('.error');

      if (resultsContainer) {
        resultsContainer.innerHTML = this.state.searching
            ? '<div class="spinner"></div>'
            : this.state.results.map((prod, i) => `
            <div class="product-card" data-idx="${i}" tabindex="0">
              <img src="${prod.media.edges[0].node.previewImage.url || ''}" alt="" />
              <div class="info">
                <div class="card-title">${prod.title}</div>
                <div class="card-id"><b>Make</b> ${prod.vendor}</div>
                <div class="card-id"><b>ID:</b> ${prod.id}</div>
                <div class="card-body">${prod.description}</div>
              </div>
            </div>
          `).join('');
      }

      // Update error display
      const searchContainer = this.shadowRoot.querySelector('.search-input').parentElement;
      let errorDiv = searchContainer.querySelector('.error');
      if (this.state.error) {
        if (!errorDiv) {
          errorDiv = document.createElement('div');
          errorDiv.className = 'error';
          searchContainer.appendChild(errorDiv);
        }
        errorDiv.textContent = this.state.error;
      } else if (errorDiv) {
        errorDiv.remove();
      }
    }
    selectProductFromResult(idx) {

      
      // Prevent multiple simultaneous selections
      if (this.isProcessingSelection) {
        //console.log('Selection already in progress, ignoring duplicate call');
        return;
      }
      
      this.isProcessingSelection = true;
      
      const prod = this.state.results[idx];
      if (!prod) {
        console.warn('No product found at index:', idx);
        this.isProcessingSelection = false;
        return;
      }

      this.state.selected = prod;
      this.saveSelectedToContentField();
      this.toggleModal(false); // This already calls render()
      
      this.dispatchEvent(
          new CustomEvent('product-selected', { detail: prod, bubbles: true, composed: true })
      );
      
      // Reset the flag after a short delay to ensure all processing is complete
      setTimeout(() => {
        this.isProcessingSelection = false;
      }, 100);
    }

    clearSelected() {
      this.state.selected = null;
      this.saveSelectedToContentField();
      this.render();
    }

    renderSelected() {
      const prod = this.state.selected;
      return prod
          ? `
        <div class="selected-product">
          <button class="clear-btn" title="Remove selection" onclick="this.getRootNode().host.clearSelected()">✕</button>
          <img src="${prod.media && prod.media.edges && prod.media.edges[0] ? prod.media.edges[0].node.previewImage.url : ''}" alt="${prod.title}" />
          <div class="selected-info">
            <div class="selected-title"><b>${prod.title}</b></div>
            <div class="selected-vendor">${prod.vendor}</div>
            <div class="selected-price">$${prod.priceRange.minVariantPrice.amount}</div>
            <div class="selected-description">${prod.description ? prod.description.slice(0, 255) + '...' : ''}</div>
            <div class="selected-actions">
              <button class="choose-btn dijitButton">Change Product</button>
            </div>
          </div>
        </div>
      `
          : `<button class="choose-btn">Choose a product</button>`;
    }

    renderSearchInput() {
      return `
        <input type="text" class="search-input" placeholder="Search Shopify products..." value="${this.state.search}" />
        ${this.state.error ? `<div class="error">${this.state.error}</div>` : ''}
      `;
    }

    renderResults() {
      return `
        <div class="results">
          ${
          this.state.searching
              ? '<div class="spinner"></div>'
              : this.state.results.map((prod, i) => `
                <div class="product-card" data-idx="${i}" tabindex="0">
                  <img src="${prod.media.edges[0].node.previewImage.url || ''}" alt="" />
                  <div class="info">
                    <div class="card-title">${prod.title}</div>
                    <div class="card-id"><b>Make</b> ${prod.vendor}</div>
                    <div class="card-id"><b>ID:</b> ${prod.id}</div>
                    <div class="card-body">${prod.description}</div>
                  </div>
                </div>
              `).join('')
      }
        </div>
      `;
    }

    renderModal() {
      if (!this.state.modalOpen) return '';
      return `
        <div class="modal-backdrop">
          <div class="modal">
            <div style="display: flex;justify-content: flex-end;">
            <button class="close-modal" title="Close">×</button>
            </div>
            ${this.renderSearchInput()}
            ${this.renderResults()}
          </div>
        </div>
      `;
    }

    render() {
      this.shadowRoot.innerHTML = `
      <style>

        .choose-btn,
        .clear-btn { margin-top: 10px; padding: 7px 20px; border-radius: 6px; border: 1px solid #eeeeee; background: #fff; color: #0057d9; cursor: pointer; font-size: 16px; }
        .clear-btn {; margin-left: 5px; }
        .clear-btn:hover { background: #eee; }
        .choose-btn:hover { background: #eee; }
        .selected-product { position: relative; display: flex; gap: 15px; align-items: flex-start; border: 1px solid #0057d9; border-radius: 8px; padding: 15px; margin: 10px 0; background: #f8fbff;}
        .selected-product img { width: 150px; height: 150px; object-fit: contain; border-radius: 8px; border: 1px solid #eee; background: white;}
        .selected-info { flex: 1; }
        .selected-title { font-size: 18px; margin-bottom: 5px; color: #333; }
        .selected-vendor { font-size: 14px; color: #666; margin-bottom: 3px; }
        .selected-price { font-size: 16px; font-weight: bold; color: #0057d9; margin-bottom: 8px; }
        .selected-description { font-size: 13px; color: #777; line-height: 1.4; margin-bottom: 12px; }
        .selected-actions { display: flex; gap: 8px; }
        .selected-product .clear-btn { position: absolute; top: 8px; right: 8px; margin: 0; font-size: 16px; padding: 4px 8px; border-radius: 8px; min-width: 28px; height: 28px; display: flex; align-items: center; justify-content: center; }
        .modal-backdrop { position: fixed; inset: 0; background: rgba(48,53,67,0.18); z-index: 9999; display: flex; align-items: center; justify-content: center; }
        .modal { background: #fff; border-radius: 12px; padding: 5px 20px 20px 20px; width: 80vw; height: 80vh; box-shadow: 0 3px 32px #aaa7, 0 1.5px 4px #0001; position: relative; display: flex; flex-direction: column; }
        .close-modal { font-size: 24px; border: none; background: none; cursor: pointer; color: #888;}
        .search-input { width: 100%; font-size: 18px; padding: 10px 50px 10px 10px; margin-bottom: 18px; border-radius: 6px; border: 1px solid #bbb; box-sizing: border-box;}
        .results { flex: 1 1 auto; min-height: 0; max-height: unset; overflow-y: auto; display: flex; flex-direction: column; gap: 12px; }
        .product-card { display: flex; gap: 16px; align-items: flex-start; border: 1px solid #eee; border-radius: 7px; padding: 11px 12px; background: #fafdff; cursor: pointer; transition: box-shadow 0.2s, background 0.2s;}
        .product-card:hover, .product-card:focus { box-shadow: 0 2px 12px #0088ff22; background: #ecf1fc;}
        .product-card img { width: 150px; height: 150px; object-fit: contain; background: #fafbfc; border-radius: 6px; border: 1px solid #eee;}
        .info { flex: 1; line-height: 1.4; }
        .card-title { font-weight: bold; font-size: 18px; margin-bottom: 5px;}
        .card-body { font-size: 13px; margin-bottom: 3px; color: #555;}
        .card-id { font-size: 12px; color: #777; }
        .error { color: #ca2525; margin: 10px 0; }
        .spinner { width: 36px; height: 36px; border: 4px solid #bbb3; border-top: 4px solid #2299ff; border-radius: 50%; animation: spin 1s linear infinite; margin: 40px auto;}
        @keyframes spin { 100% { transform: rotate(360deg); } }
        </style>
      <div class="product-search-root">
          ${this.renderSelected()}
      </div>
            ${this.renderModal()}
          `;
      // Attach search input event if modal is open
      if (this.state.modalOpen) {
        const input = this.shadowRoot.querySelector('.search-input');
        input && input.addEventListener('keyup', this.handleSearchInput.bind(this));
      }
    }
  }

  customElements.define('shopify-product-picker', ShopifyProductPicker);
</script>

]]#

<!-- Place this where you want the picker: -->
<shopify-product-picker contentField="${field.velocityVarName}"></shopify-product-picker>
